// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  image         String?
  password String
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

model Course {
  id String @id @default(uuid())
  userId String
  title String
  description String? @db.Text
  imageUrl String? @db.Text
  chapters    Chapter[]
  price Float?
  isPublished Boolean @default(false)
  categoryId String?
  category Category? @relation(fields: [categoryId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}


model Chapter {
   id          String       @id @default(uuid())
  title       String
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attachments Attachment[] 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  @@index([courseId])
}

model Attachment {
id          String     @id @default(uuid())
  name        String
  url         String     @db.Text
  chapterId   String
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  @@index([chapterId])
}





